Incluindo via CDN o Bootstrap:

Inserir na Header - Css: 
<link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/css/bootstrap.min.css" rel="stylesheet" integrity="sha384-9ndCyUaIbzAi2FUVXJi0CjmCapSmO7SnpJef0486qhLnuZ2cdeRhO02iuK6FUUVM" crossorigin="anonymous">

Inserir no final do body - JavaScript:
<script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/js/bootstrap.bundle.min.js" integrity="sha384-geWF76RCwLtnZ8qwWowPQNguL3RmwHVBC9FhGdlKrxdiJJigb/j/68SIy3Te4Bkz" crossorigin="anonymous"></script>

Tipos de Eventos no angular
https://angular.io/guide/user-input#!#type-the--event

Para usar o ngModel precisa importa a biblioteca FormsModel no app.module.ts.

Criando um componente input-property
Comando: ng g c input-property

--------- // ------------

A anotação @Input() é chamada de decorador e é usada em uma classe de componente do Angular para marcar uma propriedade 
como uma propriedade de entrada. Isso permite que valores sejam passados para essa propriedade de fora do componente, 
quando ele é utilizado em outro componente.

No exemplo, temos a propriedade nome sendo declarada como uma propriedade de entrada. A propriedade nome é do tipo string 
e é inicializada com um valor vazio ''.

Ao marcar uma propriedade com @Input(), você permite que outros componentes utilizem esse componente e passem valores para 
a propriedade nome. Por exemplo, você tem um componente chamado AppCurso com a propriedade nome declarada como uma 
propriedade de entrada, estamos usando o componente da seguinte maneira:

<app-curso [nome]="nomeCurso"> </app-curso>

Nesse caso, nomeCurso é uma variável ou propriedade do componente atual que está sendo utilizado. O valor de nomeCurso 
será passado para a propriedade nome do componente AppCurso.

Essa capacidade de receber valores externos é uma das principais características do Angular e é usada para criar 
componentes reutilizáveis e flexíveis, permitindo a comunicação entre os componentes por meio de propriedades de entrada.

-------- // ---------

A anotação @Input('nome') é um decorador que marca a propriedade nomeCurso como uma propriedade de entrada. O argumento 
'nome' dentro do decorador @Input() é conhecido como alias de entrada (input alias).

O alias de entrada permite que você defina um nome personalizado para a propriedade de entrada que é diferente do nome 
real da propriedade no componente. No exemplo, o nome real da propriedade é nomeCurso, mas o alias de entrada é definido 
como 'nome'.

Ao usar o alias de entrada, você pode usar o nome personalizado ao passar valores para a propriedade no componente, tanto 
no HTML quanto em outros componentes que utilizam o componente atual.

-------- // ---------

Vale ressaltar que é melhor usar o onInit() quando não tiver o input property e se tiver o input property usa-se o onChanges(), 
uma vez que é ele que é disparado na mudança.

-------- // ---------

Como acessar a variavel "#campoInput" do componente input sem utilizar o ngModel ou sem utilizar o value. 
Código:
@ViewChild('campoInput', {static:false}) campoValorInput!: ElementRef;

Esse script faz parte de uma aplicação Angular e envolve o uso do decorator `@ViewChild`. Vamos analisar parte por parte:

1. `@ViewChild`: O decorator `@ViewChild` é fornecido pelo Angular e é usado para obter uma referência a um elemento ou 
    diretiva dentro de um componente. Ele permite que o componente acesse e interaja com elementos do template ou diretivas 
    filhas.

2. `'campoInput'`: É o seletor que identifica o elemento ou diretiva que desejamos obter uma referência. Nesse caso, o 
     seletor é o nome `campoInput`.

3. `{static:false}`: O parâmetro `{static}` é opcional e determina quando a consulta (query) é executada. Se definido como 
   `true`, a consulta é executada durante a fase de inicialização do componente, antes da renderização do template. Se 
   definido como `false`, a consulta é executada após a renderização do template, durante a fase de detecção de mudanças 
   (change detection).

4. `campoValorInput!: ElementRef`: Aqui, estamos declarando uma variável chamada `campoValorInput` e usando o `!` para 
    indicar que ela pode ser inicializada com um valor nulo ou indefinido. O tipo `ElementRef` é uma classe fornecida pelo 
    Angular que representa uma referência a um elemento DOM nativo. `ElementRef` é usado quando você precisa acessar 
    diretamente elementos do DOM em componentes.

Resumindo, o trecho de código `@ViewChild('campoInput', {static:false}) campoValorInput!: ElementRef;` está declarando uma 
variável chamada `campoValorInput` que será usada para obter uma referência a um elemento do template com o seletor 
`#campoInput`. A consulta para obter a referência será feita após a renderização do template (usando `{static:false}`), e 
a variável será do tipo `ElementRef`, permitindo que o componente acesse e manipule diretamente esse elemento do DOM.